module Resize where

type Coord = (Double, Double, Double)

data Model =
  Model {
    block   :: [Coord]
  , sticker :: [Coord]
  }

model :: Model
model =
  Model {
    block   = mkCoords [ -0.844631, -1.0, 0.844631, -0.844631, -0.844631, 1.0, -1.0, -0.844631, 0.844631, -0.844631, -0.988173, 0.904088, -0.844631, -0.954494, 0.954494, -0.904088, -0.988173, 0.844631, -0.905578, -0.9739, 0.905578, -0.902486, -0.946593, 0.946593, -0.934333, -0.934333, 0.934333, -0.904088, -0.844631, 0.988173, -0.954494, -0.844631, 0.954494, -0.844631, -0.904088, 0.988173, -0.905578, -0.905578, 0.9739, -0.946593, -0.902486, 0.946593, -0.988173, -0.904088, 0.844631, -0.954494, -0.954494, 0.844631, -0.988173, -0.844631, 0.904088, -0.9739, -0.905578, 0.905578, -0.946593, -0.946593, 0.902486, -1.0, -0.844631, -0.844631, -0.844631, -0.844631, -1.0, -0.844631, -1.0, -0.844631, -0.988173, -0.844631, -0.904088, -0.954494, -0.844631, -0.954494, -0.988173, -0.904088, -0.844631, -0.9739, -0.905578, -0.905578, -0.946593, -0.902486, -0.946593, -0.934333, -0.934333, -0.934333, -0.844631, -0.904088, -0.988173, -0.844631, -0.954494, -0.954494, -0.904088, -0.844631, -0.988173, -0.905578, -0.905578, -0.9739, -0.902486, -0.946593, -0.946593, -0.904088, -0.988173, -0.844631, -0.954494, -0.954494, -0.844631, -0.844631, -0.988173, -0.904088, -0.905578, -0.9739, -0.905578, -0.946593, -0.946593, -0.902486, 0.844631, -0.844631, -1.0, 1.0, -0.844631, -0.844631, 0.844631, -1.0, -0.844631, 0.904088, -0.844631, -0.988173, 0.954494, -0.844631, -0.954494, 0.844631, -0.904088, -0.988173, 0.905578, -0.905578, -0.9739, 0.946593, -0.902486, -0.946593, 0.934333, -0.934333, -0.934333, 0.988173, -0.904088, -0.844631, 0.954494, -0.954494, -0.844631, 0.988173, -0.844631, -0.904088, 0.9739, -0.905578, -0.905578, 0.946593, -0.946593, -0.902486, 0.844631, -0.988173, -0.904088, 0.844631, -0.954494, -0.954494, 0.904088, -0.988173, -0.844631, 0.905578, -0.9739, -0.905578, 0.902486, -0.946593, -0.946593, 1.0, -0.844631, 0.844631, 0.844631, -0.844631, 1.0, 0.844631, -1.0, 0.844631, 0.988173, -0.844631, 0.904088, 0.954494, -0.844631, 0.954494, 0.988173, -0.904088, 0.844631, 0.9739, -0.905578, 0.905578, 0.946593, -0.902486, 0.946593, 0.934333, -0.934333, 0.934333, 0.844631, -0.904088, 0.988173, 0.844631, -0.954494, 0.954494, 0.904088, -0.844631, 0.988173, 0.905578, -0.905578, 0.9739, 0.902486, -0.946593, 0.946593, 0.904088, -0.988173, 0.844631, 0.954494, -0.954494, 0.844631, 0.844631, -0.988173, 0.904088, 0.905578, -0.9739, 0.905578, 0.946593, -0.946593, 0.902486, -1.0, 0.844631, 0.844631, -0.844631, 0.844631, 1.0, -0.844631, 1.0, 0.844631, -0.988173, 0.844631, 0.904088, -0.954494, 0.844631, 0.954494, -0.988173, 0.904088, 0.844631, -0.9739, 0.905578, 0.905578, -0.946593, 0.902486, 0.946593, -0.934333, 0.934333, 0.934333, -0.844631, 0.904088, 0.988173, -0.844631, 0.954494, 0.954494, -0.904088, 0.844631, 0.988173, -0.905578, 0.905578, 0.9739, -0.902486, 0.946593, 0.946593, -0.904088, 0.988173, 0.844631, -0.954494, 0.954494, 0.844631, -0.844631, 0.988173, 0.904088, -0.905578, 0.9739, 0.905578, -0.946593, 0.946593, 0.902486, -1.0, 0.844631, -0.844631, -0.844631, 1.0, -0.844631, -0.844631, 0.844631, -1.0, -0.988173, 0.904088, -0.844631, -0.954494, 0.954494, -0.844631, -0.988173, 0.844631, -0.904088, -0.9739, 0.905578, -0.905578, -0.946593, 0.946593, -0.902486, -0.934333, 0.934333, -0.934333, -0.844631, 0.988173, -0.904088, -0.844631, 0.954494, -0.954494, -0.904088, 0.988173, -0.844631, -0.905578, 0.9739, -0.905578, -0.902486, 0.946593, -0.946593, -0.904088, 0.844631, -0.988173, -0.954494, 0.844631, -0.954494, -0.844631, 0.904088, -0.988173, -0.905578, 0.905578, -0.9739, -0.946593, 0.902486, -0.946593, 0.844631, 0.844631, -1.0, 0.844631, 1.0, -0.844631, 1.0, 0.844631, -0.844631, 0.844631, 0.904088, -0.988173, 0.844631, 0.954494, -0.954494, 0.904088, 0.844631, -0.988173, 0.905578, 0.905578, -0.9739, 0.902486, 0.946593, -0.946593, 0.934333, 0.934333, -0.934333, 0.904088, 0.988173, -0.844631, 0.954494, 0.954494, -0.844631, 0.844631, 0.988173, -0.904088, 0.905578, 0.9739, -0.905578, 0.946593, 0.946593, -0.902486, 0.988173, 0.844631, -0.904088, 0.954494, 0.844631, -0.954494, 0.988173, 0.904088, -0.844631, 0.9739, 0.905578, -0.905578, 0.946593, 0.902486, -0.946593, 1.0, 0.844631, 0.844631, 0.844631, 1.0, 0.844631, 0.844631, 0.844631, 1.0, 0.988173, 0.904088, 0.844631, 0.954494, 0.954494, 0.844631, 0.988173, 0.844631, 0.904088, 0.9739, 0.905578, 0.905578, 0.946593, 0.946593, 0.902486, 0.934333, 0.934333, 0.934333, 0.844631, 0.988173, 0.904088, 0.844631, 0.954494, 0.954494, 0.904088, 0.988173, 0.844631, 0.905578, 0.9739, 0.905578, 0.902486, 0.946593, 0.946593, 0.904088, 0.844631, 0.988173, 0.954494, 0.844631, 0.954494, 0.844631, 0.904088, 0.988173, 0.905578, 0.905578, 0.9739, 0.946593, 0.902486, 0.946593]
  , sticker = mkCoords [ -0.7225, 0.0, 0.85, -0.85, 0.0, -0.7225, 0.7225, 0.0, -0.85, 0.85, 0.0, 0.7225, -0.840295, 0.0, -0.771292, -0.812656, 0.0, -0.812656, -0.771292, 0.0, -0.840295, -0.7225, 0.0, -0.85, 0.771292, 0.0, -0.840295, 0.812656, 0.0, -0.812656, 0.840295, 0.0, -0.771292, 0.85, 0.0, -0.7225, -0.771292, 0.0, 0.840295, -0.812656, 0.0, 0.812656, -0.840295, 0.0, 0.771292, -0.85, 0.0, 0.7225, 0.840295, 0.0, 0.771292, 0.812656, 0.0, 0.812656, 0.771292, 0.0, 0.840295, 0.7225, 0.0, 0.85]
  }

mkCoords :: [a] -> [(a,a,a)]
mkCoords []            = []
mkCoords (x:[])        = error "mkCoords: length not divisible by 3"
mkCoords (x1:x2:[])    = error "mkCoords: length not divisible by 3"
mkCoords (x1:x2:x3:xs) = (x1,x2,x3):mkCoords xs


{-

The width of the block is 2. When we extend a face left,right,front etc we are only extending
one half of it while the centre point stays the same.

We want to extend the whole size by a particular factor.

If we consider the length consisting of a "left" and a "right" distance from the centre.
Then what is the relationship between f (how much we extend the whole length) to
g (how much we extend just the "left" face)

  f(r - l) = r - g*l

Subsitute in l = -r

  2fr = r + g*r

  g = (2fr - r)/r
    =  2f - 1

-}

{-

I want the resulting cube to be the same overall length as the original cube i.e. 6x6x6 units
but I want the proportions to be quite different.

On the x axis I want the ratio to be

-}

extendNeg f a = if a < 0 then (2*f - 1)*a else a
extendPos f a = if a > 0 then (2*f - 1)*a else a

extendLeft :: Double -> Coord -> Coord
extendLeft f (x,y,z) = (extendNeg f x, y, z)

extendRight :: Double -> Coord -> Coord
extendRight f (x,y,z) = (extendPos f x, y, z)

extendFront :: Double -> Coord -> Coord
extendFront f (x,y,z) = (x, y, extendPos f z)

extendBack :: Double -> Coord -> Coord
extendBack f (x,y,z) = (x, y, extendNeg f z)

extendUp :: Double -> Coord -> Coord
extendUp f (x,y,z) = (x, extendPos f y, z)

extendDown :: Double -> Coord -> Coord
extendDown f (x,y,z) = (x, extendNeg f y, z)

liftModel :: (Coord -> Coord) -> Model -> Model
liftModel f (Model block sticker) = Model (map f block) (map f sticker)

flattenTriples :: [(a,a,a)] -> [a]
flattenTriples []              = []
flattenTriples ((x1,x2,x3):xs) = x1:x2:x3:flattenTriples xs



-- trans = flattenTriples . map extendLeft . mkCoords $ coords